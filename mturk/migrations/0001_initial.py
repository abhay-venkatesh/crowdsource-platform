# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-26 23:00
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('crowdsourcing', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MTurkAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client_id', models.CharField(blank=True, max_length=64, null=True)),
                ('client_secret', models.CharField(blank=True, max_length=128, null=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mturk_account', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MTurkAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assignment_id', models.TextField(max_length=128)),
                ('status', models.IntegerField(choices=[(1, b'In Progress'), (2, b'Submitted'), (3, b'Accepted'), (4, b'Rejected'), (5, b'Returned'), (6, b'Skipped'), (7, b'Expired')], default=1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MTurkHIT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hit_id', models.TextField(max_length=256)),
                ('hit_group_id', models.TextField(default='', max_length=128)),
                ('num_assignments', models.IntegerField(default=1)),
                ('status', models.IntegerField(choices=[(1, 'In Progress'), (2, 'Completed'), (3, 'Expired'), (4, 'Deleted')], default=1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MTurkHITType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('string_id', models.CharField(max_length=64, null=True)),
                ('name', models.CharField(max_length=128)),
                ('description', models.CharField(blank=True, max_length=512, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), default=[], null=True, size=None)),
                ('duration', models.DurationField(null=True)),
                ('qualifications_mask', models.IntegerField(default=0)),
                ('boomerang_threshold', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MTurkNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MTurkQualification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64)),
                ('description', models.CharField(max_length=512)),
                ('status', models.CharField(default='Active', max_length=16)),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), default=[], null=True, size=None)),
                ('auto_granted', models.BooleanField(default=False)),
                ('auto_granted_value', models.IntegerField(default=1, null=True)),
                ('type_id', models.CharField(max_length=128)),
                ('flag', models.IntegerField()),
                ('lower_bound', models.IntegerField(default=100)),
                ('upper_bound', models.IntegerField(default=300)),
                ('is_blacklist', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mturk_qualifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MTurkWorkerQualification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('worker', models.CharField(max_length=32)),
                ('score', models.IntegerField(default=1)),
                ('overwritten', models.BooleanField(default=False)),
                ('qualification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mturk.MTurkQualification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='mturkhittype',
            name='boomerang_qualification',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='mturk.MTurkQualification'),
        ),
        migrations.AddField(
            model_name='mturkhittype',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mturk_hit_types', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mturkhit',
            name='hit_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mturk.MTurkHITType'),
        ),
        migrations.AddField(
            model_name='mturkhit',
            name='task',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mturk_hit', to='crowdsourcing.Task'),
        ),
        migrations.AddField(
            model_name='mturkassignment',
            name='hit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mturk_assignments', to='mturk.MTurkHIT'),
        ),
        migrations.AddField(
            model_name='mturkassignment',
            name='task_worker',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mturk_assignments', to='crowdsourcing.TaskWorker'),
        ),
        migrations.AlterUniqueTogether(
            name='mturkqualification',
            unique_together=set([('owner', 'flag', 'name')]),
        ),
    ]
