# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-26 23:00
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity', models.CharField(max_length=512)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('street', models.CharField(blank=True, max_length=128, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Batch')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BatchFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=256)),
                ('file', models.FileField(upload_to=b'project_files/')),
                ('format', models.CharField(default=b'csv', max_length=8)),
                ('number_of_rows', models.IntegerField(default=1, null=True)),
                ('column_headers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), size=None)),
                ('first_row', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('hash_sha512', models.CharField(blank=True, max_length=128, null=True)),
                ('url', models.URLField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BoomerangLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField()),
                ('object_type', models.CharField(default=b'project', max_length=8)),
                ('min_rating', models.FloatField(default=3.0)),
                ('rating_updated_at', models.DateTimeField(null=True)),
                ('reason', models.CharField(max_length=64, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(error_messages={b'required': b'Please enter the category name!'}, max_length=128)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='crowdsourcing.Category')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(error_messages={b'required': b'Please specify the city!'}, max_length=64)),
                ('state', models.CharField(blank=True, max_length=64)),
                ('state_code', models.CharField(blank=True, max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CollectiveRejection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('reason', models.IntegerField(choices=[(1, b'The pay is too low for the amount of work'), (2, b'The content is offensive or inappropriate'), (3, b'Other')])),
                ('detail', models.CharField(blank=True, max_length=1024, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('body', models.TextField(max_length=8192)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='crowdsourcing.Comment')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('subject', models.CharField(max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConversationRecipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('status', models.SmallIntegerField(choices=[(1, b'Open'), (2, b'Minimized'), (3, b'Closed'), (4, b'Muted')], default=1)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Conversation')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(error_messages={b'required': b'Please specify the country!'}, max_length=64)),
                ('code', models.CharField(error_messages={b'required': b'Please specify the country code!'}, max_length=8)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32)),
                ('iso_code', models.CharField(max_length=8)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmailNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recipient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Error',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('code', models.CharField(max_length=16)),
                ('message', models.CharField(max_length=256)),
                ('trace', models.CharField(max_length=4096, null=True)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='errors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(upload_to=b'responses/%Y/%m/%d/')),
                ('name', models.CharField(max_length=256)),
                ('hash_sha512', models.CharField(blank=True, max_length=128, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FinancialAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('type', models.IntegerField(choices=[(1, b'Earnings'), (2, b'Deposits'), (3, b'Escrow')])),
                ('balance', models.DecimalField(decimal_places=4, default=0, max_digits=19)),
                ('is_system', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='financial_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(error_messages={b'required': b'Please specify the language!'}, max_length=64)),
                ('iso_code', models.CharField(max_length=8)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField(choices=[(1, b'Created'), (2, b'Completed')], default=1)),
                ('submitted_at', models.DateTimeField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MatchGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rerun_key', models.CharField(db_index=True, max_length=64, null=True)),
                ('hash', models.CharField(db_index=True, max_length=64)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_group', to='crowdsourcing.Batch')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children_groups', to='crowdsourcing.MatchGroup')),
            ],
        ),
        migrations.CreateModel(
            name='MatchWorker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mu', models.FloatField(null=True)),
                ('sigma', models.FloatField(null=True)),
                ('old_mu', models.FloatField(default=25.0, null=True)),
                ('old_sigma', models.FloatField(default=8.333, null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workers', to='crowdsourcing.Match')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('body', models.TextField(max_length=8192)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='crowdsourcing.Conversation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MessageRecipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('status', models.IntegerField(choices=[(1, b'Sent'), (2, b'Delivered'), (3, b'Read')], default=1)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Message')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('revised_at', models.DateTimeField(auto_now_add=True)),
                ('revision_log', models.CharField(blank=True, max_length=512, null=True)),
                ('group_id', models.IntegerField(null=True)),
                ('name', models.CharField(default=b'Untitled Project', error_messages={b'required': b'Please enter the project name!'}, max_length=256)),
                ('description', models.TextField(blank=True, max_length=2048, null=True)),
                ('keywords', models.TextField(blank=True, null=True)),
                ('status', models.IntegerField(choices=[(1, b'Draft'), (2, b'Published'), (3, b'In Progress'), (4, b'Completed'), (5, b'Paused'), (6, b'Rejected')], default=1)),
                ('price', models.DecimalField(decimal_places=2, max_digits=19, null=True)),
                ('aux_attributes', django.contrib.postgres.fields.jsonb.JSONField(default={b'sort_results_by': b'worker_id'}, null=True)),
                ('repetition', models.IntegerField(default=1)),
                ('max_tasks', models.PositiveIntegerField(default=None, null=True)),
                ('is_micro', models.BooleanField(default=True)),
                ('is_prototype', models.BooleanField(default=True)),
                ('is_api_only', models.BooleanField(default=True)),
                ('is_paid', models.BooleanField(default=False)),
                ('is_review', models.BooleanField(default=False)),
                ('timeout', models.DurationField(default=datetime.timedelta(0, 28800), null=True)),
                ('deadline', models.DateTimeField(null=True)),
                ('task_time', models.DurationField(null=True)),
                ('has_data_set', models.BooleanField(default=False)),
                ('data_set_location', models.CharField(blank=True, max_length=256, null=True)),
                ('min_rating', models.FloatField(default=3.0)),
                ('previous_min_rating', models.FloatField(default=3.0)),
                ('tasks_in_progress', models.IntegerField(default=0)),
                ('rating_updated_at', models.DateTimeField(auto_now_add=True)),
                ('allow_feedback', models.BooleanField(default=True)),
                ('feedback_permissions', models.IntegerField(choices=[(1, b'Others:Read+Write::Workers:Read+Write'), (2, b'Others:Read::Workers:Read+Write'), (3, b'Others:Read::Workers:Read'), (4, b'Others:None::Workers:Read')], default=1)),
                ('enable_blacklist', models.BooleanField(default=True)),
                ('enable_whitelist', models.BooleanField(default=True)),
                ('post_mturk', models.BooleanField(default=False)),
                ('published_at', models.DateTimeField(null=True)),
                ('last_opened_at', models.DateTimeField(null=True)),
                ('allow_price_per_task', models.BooleanField(default=False)),
                ('task_price_field', models.CharField(max_length=32, null=True)),
                ('amount_due', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('discussion_link', models.TextField(blank=True, null=True)),
                ('topic_id', models.IntegerField(default=-1, null=True)),
                ('post_id', models.IntegerField(default=-1, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectBatchFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.BatchFile')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Category')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Comment')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='crowdsourcing.Project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectNotificationPreference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project_group_id', models.IntegerField()),
                ('notify', models.BooleanField(default=True)),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectWorkerToRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='crowdsourcing.Batch')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Project')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Qualification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, null=True)),
                ('description', models.CharField(max_length=512, null=True)),
                ('type', models.IntegerField(choices=[(1, b'Strict'), (2, b'Flexible')], default=1)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qualifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QualificationItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expression', django.contrib.postgres.fields.jsonb.JSONField()),
                ('position', models.SmallIntegerField(null=True)),
                ('group', models.SmallIntegerField(default=1)),
                ('scope', models.CharField(db_index=True, default=b'project', max_length=32)),
                ('qualification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='crowdsourcing.Qualification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weight', models.FloatField(default=2)),
                ('origin_type', models.IntegerField(choices=[(1, b'Worker'), (2, b'Requester')])),
                ('origin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_to', to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_from', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RawRatingFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weight', models.FloatField(default=0)),
                ('is_excluded', models.BooleanField(default=False)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raw_feedback', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(error_messages={b'required': b'Please specify the region!'}, max_length=64)),
                ('code', models.CharField(error_messages={b'required': b'Please specify the region code!'}, max_length=16)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegistrationWhitelist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(db_index=True, max_length=254)),
                ('valid_from', models.DateTimeField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RequesterAccessControlGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.SmallIntegerField(choices=[(1, b'allow'), (2, b'deny')], default=1)),
                ('name', models.CharField(max_length=256, null=True)),
                ('is_global', models.BooleanField(default=False)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReturnFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('body', models.TextField(max_length=8192)),
                ('notification_sent', models.BooleanField(db_index=True, default=False)),
                ('notification_sent_at', models.DateTimeField(null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(error_messages={b'required': b'Please specify the role name!', b'unique': b'The role %(value)r already exists. Please provide another name!'}, max_length=32, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('name', models.CharField(error_messages={b'required': b'Please enter the skill name!'}, max_length=128)),
                ('description', models.CharField(error_messages={b'required': b'Please enter the skill description!'}, max_length=512)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='crowdsourcing.Skill')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StripeAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stripe_id', models.CharField(db_index=True, max_length=128)),
                ('stripe_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stripe_account', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StripeCharge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stripe_id', models.CharField(db_index=True, max_length=128)),
                ('stripe_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('expired', models.BooleanField(default=False)),
                ('expired_at', models.DateTimeField(null=True)),
                ('balance', models.IntegerField()),
                ('discount_applied', models.BooleanField(default=False)),
                ('raw_amount', models.IntegerField()),
                ('discount', models.FloatField(default=1.0)),
            ],
        ),
        migrations.CreateModel(
            name='StripeCustomer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stripe_id', models.CharField(db_index=True, max_length=128)),
                ('stripe_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('account_balance', models.IntegerField(default=0)),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stripe_customer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StripeRefund',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stripe_id', models.CharField(db_index=True, max_length=128)),
                ('stripe_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('charge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refunds', to='crowdsourcing.StripeCharge')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StripeTransfer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stripe_id', models.CharField(db_index=True, max_length=128)),
                ('stripe_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_transfers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StripeTransferReversal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stripe_id', models.CharField(db_index=True, max_length=128)),
                ('stripe_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('transfer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reversals', to='crowdsourcing.StripeTransfer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('revised_at', models.DateTimeField(auto_now_add=True)),
                ('revision_log', models.CharField(blank=True, max_length=512, null=True)),
                ('group_id', models.IntegerField(null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('row_number', models.IntegerField(db_index=True, null=True)),
                ('rerun_key', models.CharField(db_index=True, max_length=64, null=True)),
                ('hash', models.CharField(db_index=True, max_length=64)),
                ('min_rating', models.FloatField(default=3.0)),
                ('rating_updated_at', models.DateTimeField(null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=19, null=True)),
                ('batch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='crowdsourcing.Batch')),
                ('exclude_at', models.ForeignKey(db_column=b'exclude_at', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='excluded_tasks', to='crowdsourcing.Project')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='crowdsourcing.Project')),
            ],
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Comment')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='crowdsourcing.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaskWorker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('revised_at', models.DateTimeField(auto_now_add=True)),
                ('revision_log', models.CharField(blank=True, max_length=512, null=True)),
                ('group_id', models.IntegerField(null=True)),
                ('status', models.IntegerField(choices=[(1, b'In Progress'), (2, b'Submitted'), (3, b'Accepted'), (4, b'Rejected'), (5, b'Returned'), (6, b'Skipped'), (7, b'Expired')], db_index=True, default=1)),
                ('is_paid', models.BooleanField(default=False)),
                ('paid_at', models.DateTimeField(null=True)),
                ('submitted_at', models.DateTimeField(db_index=True, null=True)),
                ('started_at', models.DateTimeField(null=True)),
                ('approved_at', models.DateTimeField(null=True)),
                ('returned_at', models.DateTimeField(null=True)),
                ('is_qualified', models.BooleanField(db_index=True, default=True)),
                ('charge', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.StripeCharge')),
                ('collective_rejection', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.CollectiveRejection')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_workers', to='crowdsourcing.Task')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_workers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskWorkerResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('result', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('attachment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.FileResponse')),
                ('task_worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='crowdsourcing.TaskWorker')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('revised_at', models.DateTimeField(auto_now_add=True)),
                ('revision_log', models.CharField(blank=True, max_length=512, null=True)),
                ('group_id', models.IntegerField(null=True)),
                ('name', models.CharField(error_messages={b'required': b'Please enter the template name!'}, max_length=128)),
                ('source_html', models.TextField(default=None, null=True)),
                ('price', models.FloatField(default=0)),
                ('share_with_others', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TemplateItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(default=b'', max_length=128)),
                ('role', models.CharField(choices=[(b'display', b'Display'), (b'input', b'Input')], default=b'display', max_length=16)),
                ('type', models.CharField(db_index=True, max_length=16)),
                ('sub_type', models.CharField(max_length=16, null=True)),
                ('position', models.IntegerField()),
                ('required', models.BooleanField(default=True)),
                ('aux_attributes', django.contrib.postgres.fields.jsonb.JSONField()),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='crowdsourcing.Template')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='TemplateItemProperties',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attribute', models.CharField(max_length=128)),
                ('operator', models.CharField(max_length=128)),
                ('value1', models.CharField(max_length=128)),
                ('value2', models.CharField(max_length=128)),
                ('template_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='crowdsourcing.TemplateItem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserCountry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Country')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserLanguage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Language')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserPasswordReset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reset_key', models.CharField(max_length=40)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('login_alerts', models.SmallIntegerField(default=0)),
                ('auto_accept', models.BooleanField(default=False)),
                ('new_tasks_notifications', models.BooleanField(default=True)),
                ('aux_attributes', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Currency')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Language')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('gender', models.CharField(blank=True, choices=[(b'M', b'Male'), (b'F', b'Female'), (b'O', b'Other')], max_length=1, null=True)),
                ('purpose_of_use', models.CharField(blank=True, choices=[(b'professional', b'Professional'), (b'personal', b'personal'), (b'research', b'research'), (b'other', b'other')], max_length=64, null=True)),
                ('ethnicity', models.CharField(blank=True, choices=[(b'white', b'White'), (b'hispanic', b'Hispanic'), (b'black', b'Black'), (b'islander', b'Native Hawaiian or Other Pacific Islander'), (b'indian', b'Indian'), (b'asian', b'Asian'), (b'native', b'Native American or Alaska Native'), (b'mixed', b'Mixed Race'), (b'other', b'Other')], max_length=8, null=True)),
                ('job_title', models.CharField(blank=True, max_length=100, null=True)),
                ('birthday', models.DateTimeField(blank=True, null=True)),
                ('picture', models.BinaryField(null=True)),
                ('last_active', models.DateTimeField(null=True)),
                ('is_worker', models.BooleanField(default=True)),
                ('is_requester', models.BooleanField(default=False)),
                ('income', models.CharField(blank=True, choices=[(b'less_1k', b'Less than $1,000'), (b'1k', b'$1,000 - $1,999'), (b'2.5k', b'$2,500 - $4,999'), (b'5k', b'$5,000 - $7,499'), (b'7.5k', b'$7,500 - $9,999'), (b'10k', b'$10,000 - $14,999'), (b'15k', b'$15,000 - $24,999'), (b'25k', b'$25,000 - $39,999'), (b'40k', b'$40,000 - $59,999'), (b'60k', b'$60,000 - $74,999'), (b'75k', b'$75,000 - $99,999'), (b'100k', b'$100,000 - $149,999'), (b'150k', b'$150,000 - $199,999'), (b'200k', b'$200,000 - $299,999'), (b'300k_more', b'$300,000 or more')], max_length=9, null=True)),
                ('education', models.CharField(blank=True, choices=[(b'some_high', b'Some High School, No Degree'), (b'high', b'High School Degree or Equivalent'), (b'some_college', b'Some College, No Degree'), (b'associates', b'Associates Degree'), (b'bachelors', b'Bachelors Degree'), (b'masters', b'Graduate Degree, Masters'), (b'doctorate', b'Graduate Degree, Doctorate')], max_length=12, null=True)),
                ('unspecified_responses', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('handle', models.CharField(db_index=True, max_length=32, unique=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='crowdsourcing.Address')),
                ('languages', models.ManyToManyField(through='crowdsourcing.UserLanguage', to='crowdsourcing.Language')),
                ('nationality', models.ManyToManyField(through='crowdsourcing.UserCountry', to='crowdsourcing.Country')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activation_key', models.CharField(max_length=40)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('level', models.IntegerField(default=0)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WorkerAccessControlEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='crowdsourcing.RequesterAccessControlGroup')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WorkerBonus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reason', models.CharField(blank=True, max_length=256, null=True)),
                ('amount', models.IntegerField()),
                ('charge', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.StripeCharge')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bonuses_given', to=settings.AUTH_USER_MODEL)),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bonuses_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkerMatchScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mu', models.FloatField()),
                ('sigma', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkerProjectNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Project')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkerProjectScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project_group_id', models.IntegerField()),
                ('mu', models.FloatField(default=25.0)),
                ('sigma', models.FloatField(default=8.333)),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_scores', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='workermatchscore',
            name='project_score',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_scores', to='crowdsourcing.WorkerProjectScore'),
        ),
        migrations.AddField(
            model_name='workermatchscore',
            name='worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_scores', to='crowdsourcing.TaskWorker'),
        ),
        migrations.AddField(
            model_name='userlanguage',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.UserProfile'),
        ),
        migrations.AddField(
            model_name='usercountry',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.UserProfile'),
        ),
        migrations.AddField(
            model_name='taskworkerresult',
            name='template_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='crowdsourcing.TemplateItem'),
        ),
        migrations.AddField(
            model_name='stripecharge',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charges', to='crowdsourcing.StripeCustomer'),
        ),
        migrations.AddField(
            model_name='returnfeedback',
            name='task_worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='return_feedback', to='crowdsourcing.TaskWorker'),
        ),
        migrations.AddField(
            model_name='rawratingfeedback',
            name='task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Task'),
        ),
        migrations.AddField(
            model_name='rawratingfeedback',
            name='worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='rating',
            name='task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Task'),
        ),
        migrations.AddField(
            model_name='project',
            name='batch_files',
            field=models.ManyToManyField(through='crowdsourcing.ProjectBatchFile', to='crowdsourcing.BatchFile'),
        ),
        migrations.AddField(
            model_name='project',
            name='categories',
            field=models.ManyToManyField(through='crowdsourcing.ProjectCategory', to='crowdsourcing.Category'),
        ),
        migrations.AddField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='parent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='crowdsourcing.Project'),
        ),
        migrations.AddField(
            model_name='project',
            name='qualification',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Qualification'),
        ),
        migrations.AddField(
            model_name='project',
            name='template',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crowdsourcing.Template'),
        ),
        migrations.AddField(
            model_name='message',
            name='recipients',
            field=models.ManyToManyField(through='crowdsourcing.MessageRecipient', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='message',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='matchworker',
            name='task_worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='crowdsourcing.TaskWorker'),
        ),
        migrations.AddField(
            model_name='match',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='crowdsourcing.MatchGroup'),
        ),
        migrations.AddField(
            model_name='match',
            name='task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='crowdsourcing.Task'),
        ),
        migrations.AddField(
            model_name='country',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='countries', to='crowdsourcing.Region'),
        ),
        migrations.AddField(
            model_name='conversation',
            name='recipients',
            field=models.ManyToManyField(through='crowdsourcing.ConversationRecipient', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='conversation',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='city',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='crowdsourcing.Country'),
        ),
        migrations.AddField(
            model_name='address',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='crowdsourcing.City'),
        ),
        migrations.AlterUniqueTogether(
            name='workeraccesscontrolentry',
            unique_together=set([('group', 'worker')]),
        ),
        migrations.AlterIndexTogether(
            name='workeraccesscontrolentry',
            index_together=set([('group', 'worker')]),
        ),
        migrations.AlterUniqueTogether(
            name='userskill',
            unique_together=set([('user', 'skill')]),
        ),
        migrations.AlterUniqueTogether(
            name='taskworker',
            unique_together=set([('task', 'worker')]),
        ),
        migrations.AlterIndexTogether(
            name='task',
            index_together=set([('rerun_key', 'hash')]),
        ),
        migrations.AlterIndexTogether(
            name='stripecharge',
            index_together=set([('created_at',), ('created_at', 'customer')]),
        ),
        migrations.AlterIndexTogether(
            name='requesteraccesscontrolgroup',
            index_together=set([('requester', 'type', 'is_global')]),
        ),
        migrations.AlterUniqueTogether(
            name='rawratingfeedback',
            unique_together=set([('requester', 'worker', 'task')]),
        ),
        migrations.AlterIndexTogether(
            name='rawratingfeedback',
            index_together=set([('requester', 'worker', 'task', 'is_excluded')]),
        ),
        migrations.AlterIndexTogether(
            name='rating',
            index_together=set([('origin', 'target'), ('origin', 'target', 'updated_at', 'origin_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectnotificationpreference',
            unique_together=set([('project_group_id', 'worker')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectcategory',
            unique_together=set([('category', 'project')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectbatchfile',
            unique_together=set([('batch_file', 'project')]),
        ),
        migrations.AlterIndexTogether(
            name='project',
            index_together=set([('deadline', 'status', 'min_rating', 'deleted_at'), ('owner', 'deleted_at', 'created_at')]),
        ),
        migrations.AlterIndexTogether(
            name='matchgroup',
            index_together=set([('rerun_key', 'hash')]),
        ),
    ]
